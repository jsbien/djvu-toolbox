#!/usr/bin/python
# encoding=UTF-8

# Copyright © 2012-2018 Jakub Wilk <jwilk@jwilk.net>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the “Software”), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import argparse
import struct
import sys

b''  # Python >= 2.6 is required

class InvalidDjVu(Exception):
    pass

class UnexpectedDjVuStructure(Exception):
    pass

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-d', '--dpi',
        type=int,
        help='spatial resolution (in dots per inch)'
    )
    parser.add_argument('-r', '--rotation',
        type=int,
        choices=(0, 90, 180, 270),
        help="image's rotation (in degrees)"
    )
    parser.add_argument('-g', '--gamma',
        type=float,
        help='gamma of the device'
    )
    parser.add_argument('files', metavar='FILE', nargs='+',
        help='DjVu file to process'
    )
    options = parser.parse_args()
    for file in options.files:
        with open(file, 'r+b') as file:
            fix_file(file, options)

def fix_file(file, options):
    header = file.read(8)
    if header != 'AT&TFORM':
        raise InvalidDjVu(file.name)
    size = struct.unpack('>I', file.read(4))
    if size < 18:
        raise InvalidDjVu(file.name)
    header = file.read(8)
    if header != 'DJVUINFO':
        raise UnexpectedDjVuStructure(file.name)
    size = struct.unpack('>I', file.read(4))
    if size < 10:
        raise InvalidDjVu(file.name)
    assert file.tell() == 24
    if options.dpi is not None:
        bytes = struct.pack('<H', options.dpi)
        assert len(bytes) == 2
        file.seek(30)
        file.write(bytes)
    if options.gamma is not None:
        bytes = struct.pack('>B', round(options.gamma * 10))
        assert len(bytes) == 1
        file.seek(32)
        file.write(bytes)
    if options.rotation is not None:
        file.seek(33)
        bytes = file.read(1)
        n = struct.unpack('>B', bytes)[0]
        n = (n & ~7) | {0: 1, 90: 6, 180: 2, 270: 5}[options.rotation]
        bytes = struct.pack('>B', n)
        assert len(bytes) == 1
        file.seek(33)
        file.write(bytes)

if __name__ == '__main__':
    try:
        main()
    except InvalidDjVu as exc:
        print >>sys.stderr, (
            "error: {file}: doesn't look like a DjVu document"
        ).format(file=exc)
        sys.exit(1)
    except UnexpectedDjVuStructure as exc:
        print >>sys.stderr, (
            'error: {file}: {prog} can process only single-page DjVu documents'
        ).format(prog=sys.argv[0], file=exc)
        sys.exit(1)

# vim:ts=4 sts=4 sw=4 et
